# Exercise 1: Using the multithreading module, write a simple python program as follows:
# ● Create a pool of threads to run concurrent tasks.
# ● The pool size should be 10.
# ● The thread should receive as input a number [id] (unique identifier for each of the
#   threads, starting from 1) and a number [number_of_writtings] (number of times the
#   thread will write the message).
# ● Each thread should sleep a random amount of time (between 100 and 300
#   milliseconds) and write the message ("I am 1", "I am 2", etc) a random number of times
#   between 5 and 15.

# Exercise 2: Using the multithreading module, write a python program as follows:
# ● Create a pool of threads to run concurrent tasks.
# ● The pool size should be 3.
# ● Create and fill an array of 100 random integer numbers.
# ● Run all 3 threads to parse the vector data. One of them must show the mean, another
#   the maximum and minimum value, and the last one the standard deviation. Note that
#   although these processes share the vector, they only do so for reading. None of them
#   must modify any value of the vector.

# Exercise 3: Cree un hilo que genere números aleatorios entre 1 y 100 y los vaya insertando en una lista, 
# y otro que recorra circularmente esa lista y sustituya los números terminados en cero por el valor -1. 
# Un tercer hilo abortará los otros dos en el momento en el que la suma de los elementos de la lista supere el valor de 20000

# Exercise 4: Cree un programa que ejecute 10 hilos, cada uno de los cuales sumará 100 números aleatorios entre el 1 y el 1000. 
# Muestre el resultado de cada hilo. Ganará el hilo que consiga el número mas alto
